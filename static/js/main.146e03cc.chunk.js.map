{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["mic","window","SpeechRecognition","webkitSpeechRecognition","continous","intermResults","lang","App","useState","isListening","setIsListening","news","setNews","keyword","setKeyword","useEffect","handleListen","start","onend","onstart","console","log","stop","onresult","event","transcript","Array","from","results","map","result","join","VoiceShow","onerror","synthesis","speechSynthesis","voice","getVoices","filter","utterance","SpeechSynthesisUtterance","pitch","rate","volume","speak","a","url","fetch","json","data","articles","fetchData","className","onClick","prev","style","fontSize","item","src","urlToImage","title","description","moment","publishedAt","format","href","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAMMA,EAAM,IAFVC,OAAOC,mBAAqBD,OAAOE,yBAGrCH,EAAII,WAAY,EAChBJ,EAAIK,eAAgB,EACpBL,EAAIM,KAAO,QAyHIC,MAvHf,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGiBJ,mBAAS,IAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAKbC,qBAAU,WACRC,MACC,CAACP,IAEJ,IAAMO,EAAe,WACfP,GACFT,EAAIiB,QACJjB,EAAIkB,MAAQ,WACVlB,EAAIiB,SAGNjB,EAAImB,QAAU,WACZC,QAAQC,IAAI,cAGdrB,EAAIsB,OACJtB,EAAIkB,MAAQ,WACVE,QAAQC,IAAI,iBAIhBrB,EAAIuB,SAAW,SAACC,GACdJ,QAAQC,IAAIG,EAAO,SAEnB,IAAMC,EAAaC,MAAMC,KAAKH,EAAMI,SACjCC,KAAI,SAACC,GAAD,OAAYA,EAAO,MACvBD,KAAI,SAACC,GAAD,OAAYA,EAAOL,cACvBM,KAAK,IAERC,EAAUP,GACVX,EAAWW,IAEbzB,EAAIiC,QAAU,WACZjC,EAAIsB,OACJF,QAAQC,IAAI,wBAIVW,EAAY,SAACP,GACjB,IAAIS,EAAYjC,OAAOkC,gBAEnBC,EAAQF,EAAUG,YAAYC,QAAO,SAAUF,GACjD,MAAsB,OAAfA,EAAM9B,QACZ,GACCiC,EAAY,IAAIC,yBAClB,sBAAwBf,GAG1Bc,EAAUH,MAAQA,EAClBG,EAAUE,MAAQ,IAClBF,EAAUG,KAAO,KACjBH,EAAUI,OAAS,GACnBT,EAAUU,MAAML,GAED,uCAAG,WAAOd,GAAP,iBAAAoB,EAAA,6DACVC,EADU,8CACmCrB,EADnC,wEAEUsB,MAAMD,GAFhB,8BAEsBE,OAFtB,OAEVC,EAFU,OAGhBrC,EAAQqC,EAAKC,UAHG,2CAAH,qDAKfC,CAAU1B,IAIZ,OACE,qCACE,sBAAK2B,UAAU,+BAAf,UACE,oBAAIA,UAAU,OAAd,0BACA,wBACEA,UAAU,iBACVC,QAAS,kBAAM3C,GAAe,SAAC4C,GAAD,OAAWA,MAF3C,SAIG7C,EAAc,YAAc,kBAE/B,oBAAG2C,UAAU,OAAOG,MAAO,CAAEC,SAAU,QAAvC,iCACsB,kCAAK3C,WAG7B,qBAAKuC,UAAU,YAAf,SACGzC,GACCA,EAAKkB,KAAI,SAAC4B,GAAD,OACP,qBAAKL,UAAU,oBAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBAAKA,UAAU,GAAf,SACE,qBACEM,IAAKD,EAAKE,YAvB5B,oEAwBkBP,UAAU,4BAIhB,qBAAKA,UAAU,oBAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,6BAAKK,EAAKG,QACV,4BAAIH,EAAKI,cACT,6BAAKC,EAAOL,EAAKM,aAAaC,OAAO,iBACrC,qBAAKZ,UAAU,aAAf,SACE,mBACEa,KAAMR,EAAKX,IACXoB,OAAO,SACPd,UAAU,iBAHZ,4CCpGPe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.146e03cc.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport * as moment from \"moment\";\nconst SpeechRecoginition =\n  window.SpeechRecognition || window.webkitSpeechRecognition;\n\nconst mic = new SpeechRecoginition();\nmic.continous = true;\nmic.intermResults = true;\nmic.lang = \"en-US\";\n\nfunction App() {\n  const [isListening, setIsListening] = useState(false);\n  const [news, setNews] = useState([]);\n  const [keyword, setKeyword] = useState(\"\");\n\n  useEffect(() => {\n    handleListen();\n  }, [isListening]);\n\n  const handleListen = () => {\n    if (isListening) {\n      mic.start();\n      mic.onend = () => {\n        mic.start();\n      };\n\n      mic.onstart = () => {\n        console.log(\"MICS on\");\n      };\n    } else {\n      mic.stop();\n      mic.onend = () => {\n        console.log(\"stopped mic\");\n      };\n    }\n\n    mic.onresult = (event) => {\n      console.log(event, \"event\");\n\n      const transcript = Array.from(event.results)\n        .map((result) => result[0])\n        .map((result) => result.transcript)\n        .join(\"\");\n\n      VoiceShow(transcript);\n      setKeyword(transcript);\n    };\n    mic.onerror = () => {\n      mic.stop();\n      console.log(\"Please connect mic\");\n    };\n  };\n\n  const VoiceShow = (transcript) => {\n    var synthesis = window.speechSynthesis;\n\n    var voice = synthesis.getVoices().filter(function (voice) {\n      return voice.lang === \"en\";\n    })[0];\n    var utterance = new SpeechSynthesisUtterance(\n      \"Seraching news for \" + transcript\n    );\n\n    utterance.voice = voice;\n    utterance.pitch = 1.5;\n    utterance.rate = 1.25;\n    utterance.volume = 0.8;\n    synthesis.speak(utterance);\n\n    const fetchData = async (transcript) => {\n      const url = `https://newsapi.org/v2/everything?q=${transcript}&sortBy=publishedAt&apiKey=ba8a44f45f7b47e7b1402ced82e3c743`;\n      const data = await (await fetch(url)).json();\n      setNews(data.articles);\n    };\n    fetchData(transcript);\n  };\n  let defaultImage =\n    \"https://discountseries.com/wp-content/uploads/2017/09/default.jpg\";\n  return (\n    <>\n      <div className=\"jumbotron text-center banner\">\n        <h2 className=\"mb-3\">Voice Search</h2>\n        <button\n          className=\"btn btn-danger\"\n          onClick={() => setIsListening((prev) => !prev)}\n        >\n          {isListening ? \"Listening\" : \"Not Listening\"}\n        </button>\n        <p className=\"mt-4\" style={{ fontSize: \"18px\" }}>\n          Seraching news for :<b> {keyword}</b>\n        </p>\n      </div>\n      <div className=\"container\">\n        {news &&\n          news.map((item) => (\n            <div className=\"list_section mb-4\">\n              <div className=\"row\">\n                <div className=\"col-lg-3\">\n                  <div className=\"\">\n                    <img\n                      src={item.urlToImage || defaultImage}\n                      className=\"img-fluid imgborder\"\n                    />\n                  </div>\n                </div>\n                <div className=\"col-lg-9 col-md-9\">\n                  <div className=\"result-content\">\n                    <h5>{item.title}</h5>\n                    <p>{item.description}</p>\n                    <h6>{moment(item.publishedAt).format(\"MMM Do YYYY\")}</h6>\n                    <div className=\"text-right\">\n                      <a\n                        href={item.url}\n                        target=\"_blank\"\n                        className=\"btn btn-custom\"\n                      >\n                        Read More\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}